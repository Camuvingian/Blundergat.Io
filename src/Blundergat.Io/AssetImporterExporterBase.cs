using Blundergat.Common.Helpers;
using Blundergat.Common.Model.Io;
using Blundergat.Io.Settings;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

namespace Blundergat.Io
{
	public abstract class AssetImporterExporterBase : IAssetImporterExporter
	{
		private readonly IIoSettings _settings;
		private readonly ILogger _logger;

		public AssetImporterExporterBase(IIoSettings settings, ILogger logger)
		{
			_settings = settings;
			_logger = logger;
		}

		// TODO Sort out the async and threading model. 
		public virtual async Task<Scene> ImportFileAsync(string filePath)
		{
			if (!File.Exists(filePath))
				throw new IOException($"File \"{filePath}\" not found");

			var scene = await ImportFileImpl(filePath);
			scene.FilePath = filePath;

			ImportCompleted?.Invoke(this, new FileInfo(filePath));

			_logger?.LogInformation($"File \"{filePath}\" imported sucessfully");
			return scene;
		}

		public abstract Task<Scene> ImportFileImpl(string filePath);

		public virtual async Task ExportFileAsync(Scene scene, string filePath, bool overwrite)
		{
			filePath = CorrectFilePath(filePath);

			if (File.Exists(filePath) && overwrite)
			{
				File.Delete(filePath);
				_logger?.LogInformation("File {FilePath} deleted successfully", filePath);
			}

			await ExportFileImpl(scene, filePath);

			var fi = new FileInfo(filePath);
			ExportCompleted?.Invoke(this, fi);

			_logger?.LogInformation("{Ext} file {FilePath} ({Size}) generated successfully", 
				Path.GetExtension(filePath), filePath, Utils.BytesToString(fi.Length));
		}

		protected abstract Task ExportFileImpl(Scene scene, string filePath);

		public string CorrectFilePath(string filePath)
		{
			string fileName = Path.GetFileName(filePath);
			string directory = Path.GetDirectoryName(filePath);

			if (!Directory.Exists(directory))
			{
				// Check if this was a relative path and correct. 
				if (_settings != null)
					directory = _settings.BaseDirectory;

				if (!Directory.Exists(directory))
					throw new IOException($"Directory \"{directory}\" does not exists");
			}

			if (fileName.Length < 4 || !Path.GetExtension(fileName).CompareNoCase(Extension))
				filePath = Path.ChangeExtension(filePath, Extension);

			return filePath;
		}

		protected List<string> GetBanner(Mesh mesh)
		{
			return new List<string>
			{
				@"#####################################################################################################",
				@" Generated by Blundergat                                                                             ",
				@"#####################################################################################################",
				$" MESH METRICS::",
				$" {mesh.GetMetrics()}",
				@"#####################################################################################################"
			};
		}

		public event EventHandler<FileInfo> ImportCompleted;
		public event EventHandler<FileInfo> ExportCompleted;

		public abstract string Extension { get; }
	}
}